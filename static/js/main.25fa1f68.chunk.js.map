{"version":3,"sources":["components/ai/ai.js","components/cell/cell.js","components/column/column.js","components/table-header/table-header.js","components/table/table.js","components/lib/stuff.js","components/search-filter/search-filter.js","components/game-header/game-header.js","components/game/game.js","App.js","index.js"],"names":["Player","winLen","color","Cell","val","pulse","circleStyle","backgroundColor","Math","abs","opacity","classList","className","style","Column","data","columnAction","id","cellsToPulse","onClick","onMouseEnter","onMouseLeave","onTouchStart","map","x","i","key","toString","findIndex","TableHeader","curePlayerText","winner","currentPlayer","exitGame","Table","field","gameState","isFieldBlocked","tableFieldClassList","tableRootClassList","marginBottom","cells","filter","IsWin","TLHandler","start","maxTime","getRandom","min","max","floor","random","rateField","player","rating","isWinObj","isWin","checkMayWin","length","pow","getWays","res","forEach","arr","tmp","array","ind","a","getInsertPosition","push","ways","turn","table","_winLen","Date","now","go","deepLvl","column","optimalContainer","tmpRes","col","MultiEqual","values","j","generateIndexes","stat","end","getDiagonals","y","direction","role","lowerBound","upperBound","checkWin","src","justCheckWin","draw","inRow","entries","slice","reverse","indexes","SearchFilter","state","filters","filterChange","props","options","find","active","onChange","this","el","title","React","Component","GameHeader","launchButtonContent","onGameModeChange","gameModes","toggleGameState","selectorRootClassList","launchButtonClassList","flexBasis","Game","N","M","initialGameFieldState","Array","fill","lastAction","lastColumn","lastHoverColumn","useState","alias","setGameModes","gameMode","setGameMode","setFieldBlock","winState","setWinState","gameField","setGameFieldState","setGameState","curePlayer","setCurePlayer","useEffect","getNextTurn","init","changeArrayElem","pos","value","norm","move","columnId","action","insertPos","fieldValue","win","endGame","ai","console","error","AiTurn","undefined","curePlayerString","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25fa1f68.chunk.js","sourcesContent":["let Table = [];\r\nlet IsWin = ()=>1;\r\nlet Player;\r\nlet winLen;\r\n\r\nconst maxDeepLvl = 1;\r\n\r\nconst TLHandler = {\r\n    start: 0,\r\n    maxTime: 2000\r\n}\r\n\r\nconst INF = 10e30;\r\n\r\nconst getRandom = (min, max)=>{\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst getInsertPosition = (array)=>{\r\n    const ind = array.findIndex((a)=>a>0);\r\n    return (ind===-1?array.length:ind)-1;\r\n}\r\n\r\nconst rateField = (player)=>{\r\n    let rating = 0;\r\n    let isWinObj = IsWin(Table, winLen);\r\n\r\n    if (isWinObj.isWin){\r\n        if (isWinObj.isWin===\"draw\")\r\n            return 0;\r\n        if (isWinObj.winner===player)\r\n            return INF;\r\n        return -INF;\r\n    }\r\n\r\n    if (checkMayWin(player===1?2:1)>=0){\r\n        return -INF;\r\n    }  \r\n        \r\n\r\n    for(let i=2; i<=winLen; i++){\r\n        isWinObj = IsWin(Table, i, 0);\r\n        rating+= isWinObj.filter((x)=>x.winner===player).length*Math.pow(10, i*5);\r\n        rating-= isWinObj.filter((x)=>x.winner!==player).length*Math.pow(10, i);\r\n    }\r\n\r\n    //console.log(rating);\r\n    return rating;\r\n}\r\n\r\nconst getWays = ()=>{\r\n    const res = [];\r\n    Table.forEach((arr, i)=>{\r\n        let tmp = getInsertPosition(arr);\r\n        if (tmp<0)\r\n            return;\r\n        res.push([i, tmp]);\r\n    })\r\n    return res;\r\n}\r\n\r\n// const states = {};\r\n\r\nconst checkMayWin = (player)=>{\r\n    let ways = getWays();\r\n\r\n    for(let x of ways){\r\n        Table[x[0]][x[1]]=player;\r\n        if (IsWin(Table,winLen).isWin){\r\n            return x[0];\r\n        }\r\n        Table[x[0]][x[1]]=0;\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nconst go = (player, deepLvl=0)=>{\r\n    if (deepLvl>=maxDeepLvl)\r\n        return rateField(Player);\r\n    let res=-2*INF;\r\n    let column = -1;\r\n\r\n    let ways = getWays(Table);\r\n\r\n    let optimalContainer = [];\r\n\r\n    for(let x of ways){\r\n        Table[x[0]][x[1]]=player;\r\n        let tmpRes = go(player===1?2:1, deepLvl+1);\r\n        if (res<tmpRes){\r\n            optimalContainer = [];\r\n            res = tmpRes;\r\n            column = x[0];\r\n            optimalContainer.push({val: res, col: column});\r\n        }\r\n        if (res===tmpRes){\r\n            optimalContainer.push({val: res, col: x[0]});\r\n        }\r\n        Table[x[0]][x[1]]=0;\r\n    }\r\n\r\n    if (!deepLvl)\r\n        return optimalContainer[getRandom(0, optimalContainer.length-1)].col;\r\n    return res;\r\n}\r\n\r\nconst turn = (table, player, isWin, _winLen)=>{\r\n    Table = table;\r\n    IsWin = isWin;\r\n    Player = player;\r\n    winLen = _winLen;\r\n\r\n    TLHandler.start = Date.now();\r\n    \r\n    let tmp = checkMayWin(player);\r\n    if (tmp>=0)\r\n        return tmp;\r\n    return go(player);   \r\n}\r\n\r\nexport default turn;","import React from 'react';\r\nimport './cell.css';\r\n\r\nconst color = ['transparent','red','orange'];\r\n\r\nconst Cell = ({val, pulse=false})=>{\r\n    const circleStyle = {\r\n        backgroundColor: color[Math.abs(val)],\r\n        opacity: val<0?0.3:1\r\n    }\r\n\r\n    let classList = \"circle\";\r\n    if (pulse) classList+=\" pulseAnimation\";\r\n\r\n    return (\r\n        <div className=\"cell\">\r\n            <div style={circleStyle} className={classList}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport './column.css';\r\nimport Cell from '../cell/cell.js';\r\n\r\nconst Column = ({data, columnAction, id, cellsToPulse})=>{\r\n    return(\r\n        <div onClick={ ()=>columnAction(id, 'action') } onMouseEnter={ ()=>columnAction(id, 'hint') } \r\n             onMouseLeave={()=>columnAction(id, 'hideHint')} onTouchStart={ ()=>columnAction(id, 'hint') } className='column'>\r\n            {data.map( (x,i)=><Cell key={id.toString()+i.toString()} val={x}\r\n                                    pulse={cellsToPulse.findIndex((x)=>x[1]===i)!==-1}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Column\r\n","import React from 'react';\r\nimport './table-header.css';\r\n\r\nconst TableHeader = ({winner, currentPlayer, exitGame, style})=>{\r\n    let curePlayerText;\r\n\r\n    // const getWinText = (text)=>{\r\n    //     return (text);\r\n    // }\r\n\r\n    switch (winner){\r\n        case -1: curePlayerText=`Сейчас ходит ${currentPlayer}`; break;\r\n        case 0: curePlayerText='Ничья!'; break; //lose\r\n        default: curePlayerText=`Победил ${currentPlayer}`;\r\n    }\r\n\r\n    return(\r\n        <div style={style} className=\"tableHeader\">\r\n            <div className=\"curePlayerText\">{curePlayerText}</div>\r\n            <button onClick={exitGame} className=\"btn btn-danger\"><i className=\"fa fa-times\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableHeader;","import React from 'react';\r\nimport './table.css';\r\nimport Column from '../column/column.js';\r\nimport TableHeader from '../table-header/table-header.js';\r\n\r\nconst Table = ({currentPlayer, field, columnAction, cellsToPulse, gameState, exitGame, isFieldBlocked, winner})=>{\r\n\r\n    let tableFieldClassList=\"tableField\";\r\n    let tableRootClassList=\"tableRoot\";\r\n    \r\n\r\n    // switch (gameState){\r\n    //     case \"setup\": tableRootClassList+=\" disabled\"; break;\r\n    //     case \"ended\": tableFieldClassList+=\" notActive\";\r\n    //     default:\r\n    // }\r\n\r\n    if (gameState===\"setup\"){\r\n        tableRootClassList+=\" disabled\";\r\n    }\r\n    else if (gameState===\"ended\" || isFieldBlocked){\r\n        tableFieldClassList+=\" notActive\";\r\n    }\r\n\r\n    return (\r\n        <div className={tableRootClassList}>\r\n            <TableHeader currentPlayer={currentPlayer} exitGame={exitGame}\r\n                        winner={winner} style={{marginBottom: \"5px\"}}/>\r\n            <div className={tableFieldClassList}>\r\n                {field.map( (x, i)=>{\r\n                    const cells = cellsToPulse.filter((x)=>x[0]===i);\r\n                    return (\r\n                        <Column key={i} id={i} columnAction={columnAction} data={x} cellsToPulse={cells}/>\r\n                    );\r\n                } )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","const MultiEqual = (...values)=>{\r\n    for(let i=0; i<values.length; i++){\r\n        for(let j=i+1; j<values.length; j++){\r\n            if (values[i]!==values[j])\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nconst generateIndexes = (stat, start, end)=>{\r\n    const res = [];\r\n    for(let i=start; i<end; i++){\r\n        res.push([stat, i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nconst getDiagonals = (x, y, direction, arr)=>{\r\n    const res = {\r\n        arr: [],\r\n        ind: [],\r\n        role: `${direction} diagonal`\r\n    }\r\n\r\n    switch (direction){\r\n        case 'left': direction=0; break;\r\n        case 'right': direction=1; break;\r\n        default: direction=-1;\r\n    }\r\n\r\n    const lowerBound = {\r\n        i: direction?0:Math.max(x-4, 0),\r\n        j: 0,\r\n    }\r\n\r\n    const upperBound = {\r\n        i: Math.min(x+4, arr.length),\r\n        j: Math.min(y+4, arr[0].length)\r\n    }\r\n\r\n    \r\n\r\n    let j=y;\r\n    for(let i=x; i>=lowerBound.i && i<upperBound.i && j<upperBound.j; direction?i++:i--, j++){\r\n        res.arr.push(arr[i][j]);\r\n        res.ind.push([i,j]);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nconst checkWin = (src, winLen, justCheckWin=1)=>{\r\n    let draw=true;\r\n    const inRow = [];\r\n    for(let [i, arr] of src.entries()){\r\n        for(let [j, x] of arr.entries()){\r\n            if (x<=0)\r\n                draw=false;\r\n            const cellsToCheck = [\r\n                {arr: arr.slice(j, j+winLen), ind: generateIndexes(i, j, j+winLen), role: 'column'}, //столбцы\r\n                {arr: src.slice(i, i+winLen).map((arr)=>arr[j]), ind: generateIndexes(j, i, i+winLen).map((x)=>x.reverse()), role: 'row'}, //строки\r\n                getDiagonals(i,j, 'right', src),\r\n                getDiagonals(i,j, 'left', src)\r\n            ];\r\n\r\n            for(let values of cellsToCheck){\r\n                if (values.arr.findIndex((x)=>x<=0)===-1 && values.arr.length===winLen && MultiEqual(...values.arr)){\r\n                    inRow.push({\r\n                        isWin: true,\r\n                        winner: values.arr[0],\r\n                        indexes: values.ind\r\n                    });\r\n                    if (justCheckWin){\r\n                        return inRow[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (draw)\r\n        return {\r\n            isWin: 'draw',\r\n            winner: 0,\r\n            indexes: generateIndexes(0, 0, src.length).map((x)=>x.reverse())\r\n        };\r\n\r\n    if (justCheckWin)\r\n        return {\r\n            isWin: false\r\n        }\r\n    \r\n    return inRow;\r\n}\r\n\r\nexport {MultiEqual, generateIndexes, getDiagonals, checkWin};","import React from 'react';\r\nimport './search-filter.css';\r\n\r\nclass SearchFilter extends React.Component{\r\n\r\n\r\n    state = {\r\n        filters: [],\r\n    }\r\n\r\n    filterChange = (id)=>{\r\n        if ((this.props.options.find((x)=>x.active) || {id:-1}).id===id) //если кликнули по активному\r\n            return;\r\n\r\n        this.props.onChange(id)\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div style={this.props.style} className=\"buttonsContainer\">\r\n                {this.props.options.map((el, ind, arr)=>{\r\n                    let classList = \"btn\";\r\n\r\n                    if (el.active) classList+=\" btn-primary\";\r\n                    else classList+=\" btn-outline-secondary\";\r\n\r\n                    if (!ind) classList+=\" first\";\r\n\r\n                    if (ind===arr.length-1) classList+=\" last\";\r\n\r\n                    return(\r\n                        <button key={el.id} className={classList} onClick={()=>this.filterChange(el.id)}>{el.title}</button>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport './game-header.css';\r\n\r\nimport SearchFilter from '../search-filter/search-filter.js';\r\n\r\nconst GameHeader = ({onGameModeChange, gameModes, gameState=\"setup\", toggleGameState})=>{\r\n\r\n\r\n    let selectorRootClassList = \"selectorRoot\";\r\n    let launchButtonClassList = \"btn\";\r\n    let launchButtonContent;\r\n    if (gameState===\"ended\") {\r\n        launchButtonClassList+=\" btn-secondary\";\r\n        launchButtonContent = <span><i className=\"fa fa-repeat\"></i> Начать заново</span>\r\n    }\r\n    else if (gameState===\"setup\"){\r\n        launchButtonClassList+=\" btn-success\";\r\n        launchButtonContent = <span><i className=\"fa fa-play\"></i> Играть</span>\r\n    }\r\n    if (gameState===\"is on\"){\r\n        selectorRootClassList+=\" disabled\";\r\n        launchButtonClassList+=\" btn-secondary\";\r\n        launchButtonContent = <span><i className=\"fa fa-repeat\"></i> Начать заново</span>\r\n    }\r\n\r\n    return(\r\n        <div className=\"headerRoot mb-3\">\r\n            <div className=\"mb-1 launchRoot\">\r\n                <button onClick={toggleGameState} className={launchButtonClassList}>{launchButtonContent}</button>\r\n            </div>\r\n            <div className={selectorRootClassList+\" mb-1\"}>\r\n                <div className=\"selectorText\" style={{flexBasis: \"40%\"}}>Режим игры:</div>\r\n                <SearchFilter onChange={onGameModeChange} options={gameModes} style={{flexBasis: \"60%\"}}/>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameHeader;","import React, { useState, useEffect } from 'react';\nimport './game.css';\n\nimport Table from '../table/table.js';\nimport AiTurn from '../ai/ai.js';\nimport {checkWin} from '../lib/stuff.js';\nimport GameHeader from '../game-header/game-header.js';\n\n\n\n\nconst Game = ()=>{\n\n    const RowsNumber = 7, ColumnNumber = 6;\n\n    const WinLen=4;\n\n    const getEmptyField = (N,M)=>{\n        return Array(M).fill(Array(N).fill(0));\n    }\n\n    const initialGameFieldState = {\n        field: getEmptyField(RowsNumber, ColumnNumber),\n        lastAction: 'none',\n        lastColumn: -1,\n        lastHoverColumn: -1\n    };\n\n    const [gameModes, setGameModes] = useState([\n        {id: 0, title: <span><i className=\"fa fa-user\"></i> vs <i className=\"fa fa-desktop\"></i></span>, alias: ['player', 'ai'], active: true},\n        {id: 1, title: <span><i className=\"fa fa-user\"></i> vs <i className=\"fa fa-user\"></i></span>, alias: ['player', 'player'], active: false},\n        {id: 2, title: <span><i className=\"fa fa-desktop\"></i> vs <i className=\"fa fa-desktop\"></i></span>, alias: ['ai', 'ai'], active: false}\n    ]);\n    const [gameMode, setGameMode] = useState({});\n    const [isFieldBlocked, setFieldBlock] = useState(true);\n    const [winState, setWinState] = useState({\n        cellsToPulse: [],\n        winner: -1 // -1 = игра ещё идёт, 0 = ничья, >0 = номер выигравшего игрока\n    }); \n    const [gameField, setGameFieldState] = useState(initialGameFieldState);\n    const [gameState, setGameState] = useState(\"setup\");\n    const [curePlayer, setCurePlayer] = useState(1);\n\n\n    useEffect(()=>{\n        const {id, alias} = gameModes.find((x)=>x.active);\n        setGameMode({id, alias});\n    }, [gameModes]);\n\n    useEffect(()=>{\n        if (gameState===\"is on\")\n            getNextTurn();\n    },[gameState]);\n\n    const onGameModeChange = (id)=>{\n        setGameModes(gameModes.map((x)=>x.id===id?{...x, active: true}:{...x, active: false}));\n    }\n\n    const getInsertPosition = (array)=>{\n        const ind = array.findIndex((a)=>a>0);\n        return (ind===-1?array.length:ind)-1;\n    }\n\n    const init = ()=>{\n        setWinState({\n            cellsToPulse: [],\n            winner: -1\n        });\n        setCurePlayer(1);\n        setGameFieldState(initialGameFieldState);\n    }\n\n    const startGame = ()=>{\n        init();\n        setGameState(\"is on\");\n    }\n\n    const toggleGameState = ()=>{\n        startGame();\n    }\n\n    const exitGame = ()=>{\n        init();\n        setGameState(\"setup\");\n    }\n\n    const norm = (x)=>{\n        return x<0?0:x;\n    }\n\n    const changeArrayElem = (array, pos, value)=>{\n        return array.map((arr, i)=>{\n            return arr.map((x, j)=>{\n                return i===pos[0] && j===pos[1]?value:norm(x);\n            });\n        })\n    }\n\n    const clickHandler = (...args)=>{\n        move(...args);\n    }\n\n    const move = (columnId, action, useEff=0)=>{\n        //console.log('move', action);\n        const insertPos = [columnId, getInsertPosition(gameField.field[columnId])];\n        if (insertPos[1]<0){\n            return;\n        }\n\n        if (gameField.field[insertPos[0]][insertPos[1]]>0 && action==='hideHint'){\n            return;\n        }\n        \n        let fieldValue=0;\n\n        switch(action){\n            case 'action': fieldValue=curePlayer; break;\n            case 'hint' : fieldValue=-curePlayer; break;\n            case 'hideHint' : fieldValue=0; break;\n            default: fieldValue=0;\n        }\n\n        setGameFieldState({\n                field: changeArrayElem(gameField.field, insertPos, fieldValue),\n                lastAction: action,\n                lastColumn: action==='hint'?columnId:gameField.lastColumn\n            }\n        );\n\n\n    }\n\n    const endGame = ({winner, indexes})=>{\n        setGameState(\"ended\");\n        setWinState({\n            cellsToPulse: indexes,\n            winner: winner\n        })\n    }\n\n    const nextPlayerTurn = ()=>{\n        setCurePlayer(curePlayer===1?2:1);\n    }\n\n    useEffect(()=>{\n        if (gameField.lastAction!=='action')\n            return;\n        const win = checkWin(gameField.field, WinLen);\n        if (!win.isWin){\n            nextPlayerTurn();\n        }   \n        else{\n            endGame(win);\n        }\n    }, [gameField]);\n\n    const getNextTurn = ()=>{\n        if (gameState!==\"is on\"){\n            return;\n        }\n        switch (gameMode.alias[curePlayer-1]){\n            case 'ai':{\n                setFieldBlock(true);\n                move(ai(), 'action');\n                break;\n            }\n            case 'player':{\n                if (gameField.lastColumn>=0) move(gameField.lastColumn, 'hint');\n                setFieldBlock(false);\n                break;\n            }\n            default:{\n                console.error(`Unexpected player type: '${gameMode.alias[curePlayer-1]}'`);\n                exitGame();\n            }\n        }\n    }\n\n    useEffect(getNextTurn, [curePlayer]);\n\n\n    const curePlayerString = ()=>{\n        if (gameMode.alias===undefined)\n            return \"¯\\\\_(ツ)_/¯\";\n        switch (gameMode.alias[curePlayer-1]){\n            case 'player': return `Игрок ${curePlayer}`;\n            case 'ai': return `ИИ №${curePlayer}`;\n            default: return \"¯\\\\_(ツ)_/¯\";\n        }\n    };\n\n    const ai = ()=>{\n        return AiTurn( gameField.field.map((arr)=>[...arr]), curePlayer, checkWin, WinLen, (columnId)=>move(columnId, 'action'));\n    }\n\n    return (\n        <div className=\"GameRoot\">\n            <GameHeader gameModes={gameModes} onGameModeChange={onGameModeChange}\n                        toggleGameState={toggleGameState} gameState={gameState} />\n                        \n            <Table columnAction={clickHandler} winner={winState.winner} \n                   currentPlayer={curePlayerString()} field={gameField.field}\n                   cellsToPulse={winState.cellsToPulse} gameState={gameState}\n                   exitGame={exitGame} isFieldBlocked={isFieldBlocked} />\n        </div>\n    );\n}\n\nexport default Game;\n","import React from 'react';\r\nimport Game from './components/game/game.js';\r\nimport './App.css';\r\n\r\nconst App = ()=>{\r\n    return (\r\n        <div className=\"appRoot\">\r\n            <div className=\"leftBar\"></div>\r\n            <Game/>\r\n            <div className=\"rightBar\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}